#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.95, list = FALSE, )
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 5, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Save model for future prediction
saveRDS(object = md, file = "model.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
saveRDS(object = dataset[0:0, 1:ncol(dataset) - 1], file = "frame_format.rds")
dataset
colnames(dataset)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
ans <- predict_data(dummy_frame)
ans
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.8, list = FALSE)
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
new_dataset <- preProcess(x = continuous) %>%
predict(continuous) %>% cbind(categorical)
new_dataset <- dummified_dataset
#Plot correlation matrix
cor(new_dataset[cont_var])
#Plot histograms of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% gather() %>% ggplot(aes(value)) +
facet_wrap(~ key) +
geom_histogram(bins = 50)
dataset['LoanAmount'] %>% gather() %>% ggplot(aes(x = value)) + geom_histogram(bins = 30) + ggtitle("LoanAmount")
#Plot boxplots of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% boxplot()
boxplot(dataset['LoanAmount'], names = c("LoanAmount"))
#Plot barplots of categorical variables
counts <- table(dataset$Loan_Status, dataset$Gender)
barplot(counts, legend = rownames(counts), main = "Gender")
counts <- table(dataset$Loan_Status, dataset$Married)
barplot(counts, legend = rownames(counts), main = "Married")
counts <- table(dataset$Loan_Status, dataset$Dependents)
barplot(counts, legend = rownames(counts), main = "Dependents")
counts <- table(dataset$Loan_Status, dataset$Education)
barplot(counts, legend = rownames(counts), main = "Education")
counts <- table(dataset$Loan_Status, dataset$Self_Employed)
barplot(counts, legend = rownames(counts), main = "Self_Employed")
counts <- table(dataset$Loan_Status, dataset$Loan_Amount_Term)
barplot(counts, legend = rownames(counts), main = "Loan_Amount_Term")
counts <- table(dataset$Loan_Status, dataset$Credit_History)
barplot(counts, legend = rownames(counts), main = "Credit_History")
counts <- table(dataset$Loan_Status, dataset$Property_Area)
barplot(counts, legend = rownames(counts), main = "Property_Area")
#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.8, list = FALSE)
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
ans <- predict_data(dummy_frame)
#Save model for future prediction
saveRDS(object = md, file = "model.rds")
saveRDS(object = dataset[0:0, 1:ncol(dataset) - 1], file = "frame_format.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
ans <- predict_data(dummy_frame)
ans
source('C:/Users/Piyush/Desktop/Loan Prediction/Loan Prediction/Predict.R', echo=TRUE)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
ans <- predict_data(dummy_frame)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame)
source('C:/Users/Piyush/Desktop/Loan Prediction/Loan Prediction/Predict.R', echo=TRUE)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame)
ans
new_dataset <- preProcess(x = dataset['ApplicantIncome']) %>%
predict(dataset['ApplicantIncome'])
new_dataset
new_dataset <- preProcess(x = dummy_frame['ApplicantIncome']) %>%
predict(dummy_frame['ApplicantIncome'])
source('C:/Users/Piyush/Desktop/Loan Prediction/Loan Prediction/Predict.R', echo=TRUE)
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
preprocessor <- preprocess(x = continuous)
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
preprocessor <- preProcess(x = continuous)
new_dataset <- preprocessor %>%
predict(continuous) %>% cbind(categorical)
new_dataset <- dummified_dataset
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
new_dataset
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
source('C:/Users/Piyush/Desktop/Loan Prediction/Loan Prediction/Predict.R', echo=TRUE)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = x_test
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 3,] = dataset[8:10, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[9, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[10, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[3, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[2, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[1, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[6, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[7, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[11, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[15, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[19, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
#Import libraries
library(mlr, warn.conflicts = FALSE)
library(caret, warn.conflicts = FALSE)
library(tidyr)
library(purrr, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(magrittr, warn.conflicts = FALSE)
library(ggplot2)
source("scripts/Preprocess.R")
source("scripts/Predict.R")
#Read csv file, remove Loan_ID column
dataset = read.csv("data/dataset.csv") %>% select(-Loan_ID)
#Display first few rows of table
head(dataset)
count <- table(dataset$Loan_Status)
barplot(height = count, xlab = "LoanStatus")
#Oversampling
dataset <- dataset %>% rbind(dataset[dataset['Loan_Status'] == 'N',])
#Display metadata
str(dataset)
#Convert from int to factor
dataset$Loan_Amount_Term <- as.factor(dataset$Loan_Amount_Term)
#Store names of continuous variables
cont_var <- c('ApplicantIncome', 'CoapplicantIncome', 'LoanAmount')
#Display no of nas in all columns
lapply(dataset, function(x) sum(is.na(x)))
#Display frequencies of all possible values
table(dataset$Loan_Amount_Term)
table(dataset$Credit_History)
#Remove na
dataset$LoanAmount <- replace(dataset$LoanAmount, is.na(dataset$LoanAmount), values = mean(dataset$LoanAmount, na.rm = TRUE))
dataset$Loan_Amount_Term[is.na(dataset$Loan_Amount_Term)] <- 360
dataset$Credit_History[is.na(dataset$Credit_History)] <- 1
#Replace categorical variables by dummy values
cont_var <- c('ApplicantIncome', 'CoapplicantIncome', 'LoanAmount')
cat_var <- dataset %>% select(-cont_var, -Loan_Status) %>% colnames()
categorical <- dataset[cat_var]
continuous <- dataset %>% select(cont_var)
dmy <- dummyVars( ~ ., data = categorical)
new_categorical <- data.frame(predict(dmy, newdata = categorical)) %>%
select(-Gender., -Married., -Dependents., -Self_Employed.)
dummified_dataset <- cbind(continuous, new_categorical, dataset['Loan_Status'])
dummified_dataset
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
preprocessor <- preProcess(x = continuous)
new_dataset <- preprocessor %>%
predict(continuous) %>% cbind(categorical)
new_dataset <- dummified_dataset
#Plot correlation matrix
cor(new_dataset[cont_var])
#Plot histograms of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% gather() %>% ggplot(aes(value)) +
facet_wrap(~ key) +
geom_histogram(bins = 50)
dataset['LoanAmount'] %>% gather() %>% ggplot(aes(x = value)) + geom_histogram(bins = 30) + ggtitle("LoanAmount")
#Plot boxplots of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% boxplot()
boxplot(dataset['LoanAmount'], names = c("LoanAmount"))
#Plot barplots of categorical variables
counts <- table(dataset$Loan_Status, dataset$Gender)
barplot(counts, legend = rownames(counts), main = "Gender")
counts <- table(dataset$Loan_Status, dataset$Married)
barplot(counts, legend = rownames(counts), main = "Married")
counts <- table(dataset$Loan_Status, dataset$Dependents)
barplot(counts, legend = rownames(counts), main = "Dependents")
counts <- table(dataset$Loan_Status, dataset$Education)
barplot(counts, legend = rownames(counts), main = "Education")
counts <- table(dataset$Loan_Status, dataset$Self_Employed)
barplot(counts, legend = rownames(counts), main = "Self_Employed")
counts <- table(dataset$Loan_Status, dataset$Loan_Amount_Term)
barplot(counts, legend = rownames(counts), main = "Loan_Amount_Term")
counts <- table(dataset$Loan_Status, dataset$Credit_History)
barplot(counts, legend = rownames(counts), main = "Credit_History")
counts <- table(dataset$Loan_Status, dataset$Property_Area)
barplot(counts, legend = rownames(counts), main = "Property_Area")
#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.8, list = FALSE)
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Save model for future prediction
saveRDS(object = md, file = "model.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
saveRDS(object = dataset[0:0, 1:ncol(dataset) - 1], file = "model/frame_format.rds")
colnames(dataset)
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
#Remove na
dataset$LoanAmount <- replace(dataset$LoanAmount, is.na(dataset$LoanAmount), values = mean(dataset$LoanAmount, na.rm = TRUE))
dataset$Loan_Amount_Term[is.na(dataset$Loan_Amount_Term)] <- 360
dataset$Credit_History[is.na(dataset$Credit_History)] <- 0
#Replace categorical variables by dummy values
cont_var <- c('ApplicantIncome', 'CoapplicantIncome', 'LoanAmount')
cat_var <- dataset %>% select(-cont_var, -Loan_Status) %>% colnames()
categorical <- dataset[cat_var]
continuous <- dataset %>% select(cont_var)
dmy <- dummyVars( ~ ., data = categorical)
new_categorical <- data.frame(predict(dmy, newdata = categorical)) %>%
select(-Gender., -Married., -Dependents., -Self_Employed.)
dummified_dataset <- cbind(continuous, new_categorical, dataset['Loan_Status'])
dummified_dataset
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
preprocessor <- preProcess(x = continuous)
new_dataset <- preprocessor %>%
predict(continuous) %>% cbind(categorical)
new_dataset <- dummified_dataset
#Plot correlation matrix
cor(new_dataset[cont_var])
#Plot histograms of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% gather() %>% ggplot(aes(value)) +
facet_wrap(~ key) +
geom_histogram(bins = 50)
dataset['LoanAmount'] %>% gather() %>% ggplot(aes(x = value)) + geom_histogram(bins = 30) + ggtitle("LoanAmount")
#Plot boxplots of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% boxplot()
boxplot(dataset['LoanAmount'], names = c("LoanAmount"))
#Plot barplots of categorical variables
counts <- table(dataset$Loan_Status, dataset$Gender)
barplot(counts, legend = rownames(counts), main = "Gender")
counts <- table(dataset$Loan_Status, dataset$Married)
barplot(counts, legend = rownames(counts), main = "Married")
counts <- table(dataset$Loan_Status, dataset$Dependents)
barplot(counts, legend = rownames(counts), main = "Dependents")
counts <- table(dataset$Loan_Status, dataset$Education)
barplot(counts, legend = rownames(counts), main = "Education")
counts <- table(dataset$Loan_Status, dataset$Self_Employed)
barplot(counts, legend = rownames(counts), main = "Self_Employed")
counts <- table(dataset$Loan_Status, dataset$Loan_Amount_Term)
barplot(counts, legend = rownames(counts), main = "Loan_Amount_Term")
counts <- table(dataset$Loan_Status, dataset$Credit_History)
barplot(counts, legend = rownames(counts), main = "Credit_History")
counts <- table(dataset$Loan_Status, dataset$Property_Area)
barplot(counts, legend = rownames(counts), main = "Property_Area")
#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.8, list = FALSE)
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Save model for future prediction
saveRDS(object = md, file = "model.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
#Import libraries
library(mlr, warn.conflicts = FALSE)
library(caret, warn.conflicts = FALSE)
library(tidyr)
library(purrr, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(magrittr, warn.conflicts = FALSE)
library(ggplot2)
source("scripts/Preprocess.R")
source("scripts/Predict.R")
#Read csv file, remove Loan_ID column
dataset = read.csv("data/dataset.csv") %>% select(-Loan_ID)
#Display first few rows of table
head(dataset)
count <- table(dataset$Loan_Status)
barplot(height = count, xlab = "LoanStatus")
#Oversampling
dataset <- dataset %>% rbind(dataset[dataset['Loan_Status'] == 'N',])
#Display metadata
str(dataset)
#Convert from int to factor
dataset$Loan_Amount_Term <- as.factor(dataset$Loan_Amount_Term)
#Store names of continuous variables
cont_var <- c('ApplicantIncome', 'CoapplicantIncome', 'LoanAmount')
#Display no of nas in all columns
lapply(dataset, function(x) sum(is.na(x)))
#Display frequencies of all possible values
table(dataset$Loan_Amount_Term)
table(dataset$Credit_History)
#Remove na
dataset$LoanAmount <- replace(dataset$LoanAmount, is.na(dataset$LoanAmount), values = mean(dataset$LoanAmount, na.rm = TRUE))
dataset$Loan_Amount_Term[is.na(dataset$Loan_Amount_Term)] <- 360
dataset$Credit_History[is.na(dataset$Credit_History)] <- 0
#Replace categorical variables by dummy values
cont_var <- c('ApplicantIncome', 'CoapplicantIncome', 'LoanAmount')
cat_var <- dataset %>% select(-cont_var, -Loan_Status) %>% colnames()
categorical <- dataset[cat_var]
continuous <- dataset %>% select(cont_var)
dmy <- dummyVars( ~ ., data = categorical)
new_categorical <- data.frame(predict(dmy, newdata = categorical)) %>%
select(-Gender., -Married., -Dependents., -Self_Employed.)
dummified_dataset <- cbind(continuous, new_categorical, dataset['Loan_Status'])
dummified_dataset
#Preprocess data
categorical <- dummified_dataset %>% select(-cont_var)
continuous <- dummified_dataset %>% select(cont_var)
preprocessor <- preProcess(x = continuous)
new_dataset <- preprocessor %>%
predict(continuous) %>% cbind(categorical)
new_dataset <- dummified_dataset
#Plot correlation matrix
cor(new_dataset[cont_var])
#Plot histograms of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% gather() %>% ggplot(aes(value)) +
facet_wrap(~ key) +
geom_histogram(bins = 50)
dataset['LoanAmount'] %>% gather() %>% ggplot(aes(x = value)) + geom_histogram(bins = 30) + ggtitle("LoanAmount")
#Plot boxplots of continuous variables
dataset %>% select(cont_var, -LoanAmount) %>% boxplot()
boxplot(dataset['LoanAmount'], names = c("LoanAmount"))
#Plot barplots of categorical variables
counts <- table(dataset$Loan_Status, dataset$Gender)
barplot(counts, legend = rownames(counts), main = "Gender")
counts <- table(dataset$Loan_Status, dataset$Married)
barplot(counts, legend = rownames(counts), main = "Married")
counts <- table(dataset$Loan_Status, dataset$Dependents)
barplot(counts, legend = rownames(counts), main = "Dependents")
counts <- table(dataset$Loan_Status, dataset$Education)
barplot(counts, legend = rownames(counts), main = "Education")
counts <- table(dataset$Loan_Status, dataset$Self_Employed)
barplot(counts, legend = rownames(counts), main = "Self_Employed")
counts <- table(dataset$Loan_Status, dataset$Loan_Amount_Term)
barplot(counts, legend = rownames(counts), main = "Loan_Amount_Term")
counts <- table(dataset$Loan_Status, dataset$Credit_History)
barplot(counts, legend = rownames(counts), main = "Credit_History")
counts <- table(dataset$Loan_Status, dataset$Property_Area)
barplot(counts, legend = rownames(counts), main = "Property_Area")
#Split dataset into training and testing datasets
train_indices <- createDataPartition(y = new_dataset$Loan_Status, p = 0.8, list = FALSE)
training <- new_dataset[train_indices,]
test <- new_dataset[-train_indices,]
#Initiate training controls
control <- trainControl(method = "cv", number = 10, p = 0.8, search = "grid")
#Train
x_train <- training[,1:ncol(training) - 1]
y_train <- training[,ncol(training)]
md <- caret::train(x = x_train, y = y_train, method = "cforest", trControl = control, metric = "Accuracy")
md
#Test
x_test <- test[,1:ncol(test) - 1]
y_test <- test[,ncol(test)]
y_pred <- predict(md, x_test)
confusionMatrix(data = y_pred, reference = y_test, positive = "Y")
#Save model for future prediction
saveRDS(object = md, file = "model.rds")
colnames(dataset[,1:ncol(dataset) - 1]) %>% saveRDS(file = "feature_list.rds")
saveRDS(object = dataset[0:0, 1:ncol(dataset) - 1], file = "model/frame_format.rds")
colnames(dataset)
#Prediction example
dummy_frame <- readRDS("frame_format.rds")
dummy_frame[nrow(dummy_frame) + 1,] = dataset[8, 1:ncol(dataset) - 1]
print(dataset[8, ncol(dataset)])
ans <- predict_data(dummy_frame, preprocessor)
ans
